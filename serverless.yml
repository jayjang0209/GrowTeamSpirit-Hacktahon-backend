service: hackathon-sap-db-beckend

frameworkVersion: '3'

package:
  exclude:
    - node_modules/**
    - venv/**

plugins:
  - serverless-offline
  - serverless-python-requirements
  - serverless-prune-plugin

custom:
  allowedHeaders:
    - Accept
    - Content-Type
    - Content-Length
    - Authorization
    - X-Amz-Date
    - X-Api-Key
    - X-Amz-Security-Token
    - X-Amz-User-Agent
    - app_user_id
    - app_user_name

provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage, 'dev'}
  region: us-west-2
  memorySize: 128
  timeout: 5
  environment:
    USER_TABLE: Users-staging-${opt:stage, self:provider.stage}
    EVENT_TABLE: Event-staging-${opt:stage, self:provider.stage}
  iamRoleStatements:
  - Effect: "Allow"
    Action:
      - "dynamodb:GetItem"
      - "dynamodb:PutItem"
      - "dynamodb:UpdateItem"
      - "dynamodb:DeleteItem"
      - "dynamodb:Query"
      - "dynamodb:Scan"
    Resource: 
      - "arn:aws:dynamodb:${opt: region, self:provider.region}:*:table/${self:provider.environment.USER_TABLE}"
      - "arn:aws:dynamodb:${opt: region, self:provider.region}:*:table/${self:provider.environment.EVENT_TABLE}"

  - Effect: "Allow"
    Action:
      - "ses:*"
    Resource: 
      - "*"        

functions:
  update-user-data:
    handler: api/user/data.lambda_handler
    description: PATCH /user/
    events:
      - http:
          path: user/{user_id}
          method: patch
          cors:
            origin: "*"
            headers: ${self:custom.allowedHeaders}
          request:
            parameters:
              paths:
                user_id: true

  get-user-data:
    handler: api/user/data.lambda_handler
    description: GET /user/
    events:
      - http:
          path: user/{user_id}
          method: get
          cors:
            origin: "*"
            headers: ${self:custom.allowedHeaders}
          request:
            parameters:
              paths:
                user_id: true

  update-user-interest:
    handler: api/user/data.lambda_handler
    description: PATCH /user/interest
    events:
      - http:
          path: user/interest/{user_id}
          method: patch
          cors:
            origin: "*"
            headers: ${self:custom.allowedHeaders}
          request:
            parameters:
              paths:
                user_id: true

  get-all-list-of-interest:
    handler: api/user/data.lambda_handler
    description: GET /user/interest
    events:
      - http:
          path: /user/interest/get-list/{category}
          method: get
          cors:
            origin: "*"
            headers: ${self:custom.allowedHeaders}
          request:
            parameters:
              paths:
                category: true
  
  get-all-list-of-attribute:
    handler: api/user/data.lambda_handler
    description: GET /user/get-list
    events:
      - http:
          path: /user/get-list/{category}
          method: get
          cors:
            origin: "*"
            headers: ${self:custom.allowedHeaders}
          request:
            parameters:
              paths:
                category: true

  get-filtered-users:
    handler: api/user/data.lambda_handler
    description: GET /user/get-filtered-users
    events:
      - http:
          path: /user/get-filtered-users/{city}/{interest}
          method: get
          cors:
            origin: "*"
            headers: ${self:custom.allowedHeaders}
          request:
            parameters:
              paths:
                city: true
                interest: true

  accept-event:
    handler: api/event/data.lambda_handler
    description: PATCH /event/accept-event
    events:
      - http:
          path: /event/accept-event/{user_email}/{event_id}
          method: patch
          cors:
            origin: "*"
            headers: ${self:custom.allowedHeaders}
          request:
            parameters:
              paths:
                user_email: true
                event_id: true

  accept-event-get:
    handler: api/event/data.lambda_handler
    description: GET /event/accept-event
    events:
      - http:
          path: /event/accept-event/{user_email}/{event_id}
          method: get
          cors:
            origin: "*"
            headers: ${self:custom.allowedHeaders}
          request:
            parameters:
              paths:
                user_email: true
                event_id: true  
  
  cancel-event:
    handler: api/event/data.lambda_handler
    description: PATCH /event/cancel-event
    events:
      - http:
          path: /event/cancel-event/{user_email}/{event_id}
          method: patch
          cors:
            origin: "*"
            headers: ${self:custom.allowedHeaders}
          request:
            parameters:
              paths:
                user_email: true
                event_id: true

  get-participants:
    handler: api/event/data.lambda_handler
    description: GET /event/get-participants
    events:
      - http:
          path: /event/get-participants/{event_id}
          method: get
          cors:
            origin: "*"
            headers: ${self:custom.allowedHeaders}
          request:
            parameters:
              paths:
                event_id: true  

  get-event:
    handler: api/event/data.lambda_handler
    description: GET /event/get-event
    events:
      - http:
          path: /event/get-event/{event_id}
          method: get
          cors:
            origin: "*"
            headers: ${self:custom.allowedHeaders}
          request:
            parameters:
              paths:
                event_id: true  


  get-my-events:
    handler: api/event/data.lambda_handler
    description: GET /event/get-my-events
    events:
      - http:
          path: /event/get-my-events/{user_email}
          method: get
          cors:
            origin: "*"
            headers: ${self:custom.allowedHeaders}
          request:
            parameters:
              paths:
                user_email: true

          
  
  send-event-invitation:
    handler: api/user/data.lambda_handler
    description: POST /user/send-invitation
    events:
      - http:
          path: /user/send-invitation/{user_email}/{event_id}
          method: post
          cors:
            origin: "*"
            headers: ${self:custom.allowedHeaders}
          request:
            parameters:
              paths:
                user_email: true
                event_id: true

  generate_event:
    handler: api/event/generate_event.lambda_handler
    description: Generate event and send invitation to users
    events:
      - schedule: rate(14 days)

resources:
 Resources:
   userTable:
     Type: AWS::DynamoDB::Table
     DeletionPolicy: Retain
     Properties:
       TableName: ${self:provider.environment.USER_TABLE}
       AttributeDefinitions:
         - AttributeName: id
           AttributeType: S
       KeySchema:
         - AttributeName: id
           KeyType: HASH
       ProvisionedThroughput:
         ReadCapacityUnits: 1
         WriteCapacityUnits: 1

   eventsTable:
     Type: AWS::DynamoDB::Table
     DeletionPolicy: Retain
     Properties:
       TableName: ${self:provider.environment.EVENT_TABLE}
       AttributeDefinitions:
         - AttributeName: id
           AttributeType: S
       KeySchema:
         - AttributeName: id
           KeyType: HASH
       ProvisionedThroughput:
         ReadCapacityUnits: 1
         WriteCapacityUnits: 1       